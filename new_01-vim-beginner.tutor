#             Welcome   to   the   VIM   Tutor

Vim is a very powerful text editor that has many commands. Unlike most text
editors where you use the keyboard to enter text and arrow keys to move your
cursor, in Vim you use the keyboard to enter commands to manipulate text.
These commands allow you to express complex thoughts in just a few keystrokes
to move through text and manipulate it much faster than in most text editors.
There is a great amount of commands, too many to explain in a tutor such as
this, but as you will see over the course of this tutorial series these
commands are not arbitrarily chosen, they form a sort of language with its own
grammar.

This tutor is designed to describe enough of the commands that you will be able
to easily use Vim as an all-purpose editor.  It is important to remember that
it is set up to teach by use. That means that you need to do the exercises to
learn them properly.  If you only read the text, you will soon forget what is
most important!

NOTE: The commands in the lessons will modify the text, but those changes won't
be saved.  Don't worry about messing things up; just remember that pressing
[«<Esc>»](<Esc>) and then [u](u) will undo the latest change.

This tutorial is interactive, and there are a few things you should know.
Pressing [«<Enter>»](<Enter>) over text highlighted [like this](holy-grail)
will take you to some relevant help (hopefully), and pressing ? over any word
will try to do so too.  You can close the help window by pressing «q».
Sometimes you will be required to modify text like

--->  this here {expect:this here}

Once you have done the changes correctly, the ✗ sign at the left will change to
✓. I imagine you can already see how neat Vim can be ;) Other times, you'll be
prompted to run a command (I'll explain this later):

~~~ viml
    :help <Enter>
~~~

or press a sequence of keys

    <Esc>0f<SPACE>d3wP$P

Text within angle brackets (like <Enter>) describes a key to press instead of
text to type.

Now, make sure that your Shift-Lock key is NOT depressed and press the «j» key
enough times to move the cursor so that Lesson 1.1 completely fills the screen.

## Lesson 1.1: MOVING THE CURSOR

** To move the cursor, press the «h», «j», «k», «l» keys as indicated. **

        ← ↓ ↑ →    Hint: The h key is at the left and moves left.
        h j k l          The l key is at the right and moves right.
                         The j key looks like a down arrow.


  1. Move the cursor around the screen until you are comfortable.

  2. Hold down the «j» and move to the next lesson.


NOTE: If you are ever unsure about something you typed, press <Esc> to place
      you in Normal mode.  Then retype the command you wanted.

NOTE: The cursor keys should also work, but the «h» «j» «k» «l» keys have not
      been chosen arbitrarily, they are on the right-hand side of the home row,
      allowing you to mode the curse without taking youre hand off. Once
      getting used to «h» «j» «k» «l» you will be able to move around much
      faster. Really!

# Lesson 1.2: EXITING VIM

!! NOTE: Before executing any of the steps below, read this entire lesson !!

  1. Press the <Esc> key (to make sure you are in [Normal](Normal) [mode](vim-modes)).

  2. Type:

     :q! <Enter>.

     This exits the editor, DISCARDING any changes you have made. The
     exclamation mark "supercharges" the [:q](:q) command.

  3. Open vim and get back here by executing the command that got you into this
     tutor. That might be:

     :Vimtutor <Enter>

  4. If you have these steps memorized and are confident, execute steps
     1 through 3 to exit and re-enter the editor.

NOTE:  The command  [:q!](:q) <Enter>  discards any changes you have made. In a
       few lessons you will learn how to save the changes to a file.

  5. Move the cursor down to Lesson 1.3.

# Part 1: COUNT, OPERATOR, MOTION -- ACTION

Before we continue we need to understand the concept of modal editing first:
most editors have two "modes", a mode where you enter text and a mode where you
select text.

You have already met two of Vim's modes so far: normal mode which
is the default mode of Vim where you move around the cursor, and command mode
when you entered the command to quit Vim. You will soon meet insert mode which
lets you type text and visual mode which lets you visually select text. Out of
these normal mode is where you will spend most of your time.

Keyboard keys have different effects depending on the mode you are in: pressing
the «j» key in normal mode will move the cursor downwards, but pressing the
same key in insert mode will place a 'j' character in your text.

The next important thing we need to keep in mind is how the syntax of Vim
commands works: unlike most editor where keyboard commands are just shortcuts,
Vim commands are part of a language with its own grammar and vocabulary.

The structure of a "sentence" is *count* *operator* *motion*. Don't think too
much about if for now, all that is important to know is that once you have
learned a new vocable you can use it along with the ones you already know to
construct completely new sentences. This is what makes Vim so productive, you
tell it exactly what it is you want to do. Soon a sequence like this

    <Esc>0f<SPACE>d3wP$P

will read to you like a regular sentence instead of a seemingly random
collection of letters and symbols.

You have already learned four motions so far: h, j, k and l.


# Lesson 2.4: USING A COUNT FOR A MOTION

** Typing a number before a motion repeats it that many times. **

  1. Move the cursor to the start of the line marked ---> below.

  2. Type  «2l»  to move the cursor two characters forward.

  3. Type  «3h»  to move the cursor three character backwards.

  4. Type  «0»  ([zero](0)) to move to the start of the line.

  5. Repeat steps 2 and 3 with different numbers.

---> This is just a line with words you can move around in. {expect:NULL}

  6. Move on to Lesson 2.5.

Strictly speaking 0 on its own is not a count, it is a motion that moves to the
beginning of the current line, but a count can contain the digit 0. Typing «10j»
will move the cursor ten lines down.

You can now move more than one character at a time, but constantly typing in a
count is cumbersome. There are better motions for moving around.

# Lesson something.something: WORD-WISE MOTION

** Moving word-wise is faster than character-wise **

  1. Move the cursor to the start of the line marked ---> below.

  2. Press «w» to move the cursor to the first character of the next word.

  3. Press «e» to move the cursor to the last character of the current word.

  4. Press «b» to move the cursor to the first character of the current word or
     first character of the previous word.

  5. Now try to above commands by prepending a count: «2w».

  6. Press «W», «E» and «B», moves across WORDs instead of words.

---> This is just a line with words you can move around in. {expect:NULL}

The mnemonics of these operators have been chosen to be easy to remember:
[w](w) stands for *word*, [e](e) stands for *end* and [b](b) stands for
*beginning*.

But what do [W](W), [E](E) and [B](B) stand for? Vim knows of two different
types of "words": [word](word) and [WORD](WORD). A word is what you will want
pretty much all the time, because it is more restrictive, while a WORD is any
sequence of non-blank characters. Try it out, compare the lower-case motions
with their upper-case variants.

---> The string class.method is three words but only one WORD. {expect:NULL}

For the exact definitions consult the help. This also goes to demonstrate a
common convention: an upper-case variant of an operator performs a similar but
"supercharged" version of the operator.


We will learn more motions later, but with these three you can already move
much faster through your text than if you were using the cursor keys directly,
especially if you combine them with a count. Character-wise movement should
only be used for small position adjustments from now on.


## Lesson 1.3: TEXT EDITING - DELETION

** Press  «x»  to delete the character under the cursor. **

  1. Move the cursor to the line below marked --->.

  2. To fix the errors, move the cursor until it is on top of the
     character to be deleted.

  3. Press [the «x» key](x) to delete the unwanted character.

  4. Repeat steps 2 through 4 until the sentence is correct.

  5. Press «2x» to delete two characters at a time, starting with the character
     under the cursor.

---> The ccow jumpedd ovverrr thhhe mooon. {expect:The cow jumped over the moon.}

  5. Now that the line is correct, go on to Lesson 1.4.

The «x» command is an operator, meaning it tells Vim to do something. You can
combine it with a count, but it does not take a motion, it always operates on
the character it is on. So you can tell it to delete two characters, but not to
delete the current word. We will use a different operator for that.


# Lesson 1.4: TEXT EDITING: INSERTION

** Press  «i» and «I» to insert text. **

  1. Move the cursor to the first line below marked --->.

  2. To make the first line the same as the second, move the cursor on top
     of the first character AFTER where the text is to be inserted.

     Tip: use the «w» motion you learned before to jump to the beginning of the
          word where you want to insert.

  3. Press  [«i»](i)  and type in the necessary additions.

  4. As each error is fixed press <Esc> to return to Normal mode.
     Repeat steps 2 through 4 to correct the sentence.

---> There is text misng this . {expect:There is some text missing from this line.}
---> There is some text missing from this line. {expect:There is some text missing from this line.}

  5. You can use the upper-case version «I» to insert text at the beginning of
     the line regardless of where on the line your cursor is. Place the cursor
     anywhere on the line below and hit «I» to insert.

---> is some text missing from this line. {expect:There is some text missing from this line.}
---> There is some text missing from this line. {expect:There is some text missing from this line.}

The «i» operator does not take any count or motion, it drops us straight into
insert mode. There are actually operators that can take a cound and motion
before transitioning into insert mode, but they wouldn't make sense here.

# Lesson 1.5: TEXT EDITING: APPENDING

** Press  «a» and «A»  to append text. **

  1. Move the cursor to the first line below marked --->.

  2. To make the first line the same as the second, move the cursor on top
     of the first character BEFORE where the text is to be inserted.

     Tip: use the «e» motion you learned before to jump to the end of the word
     where you want to append.

  3. As the text has been appended press <Esc> to return to Normal mode.

---> There is text misng this. {expect:There is some text missing from this line.}
---> There is some text missing from this line. {expect:There is some text missing from this line.}

  5. You can use the upper-case version «A» to append text at the end of the
     line regardless of where on the line your custor is. Place the cursor
     anywhere on the line below and hit «A» to append.

---> There is some text missing from th {expect:There is some text missing from this line.}
---> There is some text missing from this line. {expect:There is some text missing from this line.}

Appending is very similar to inserting, except it appends text after the cursor.
You will use both commands frequently, so you should get into the habit of using
both when they are appropiate. Don't use «li» (move left, then insert) to append
text, that is slower and less repeatable than appending directly.  One core idea
in Vim is to do tasks in as few steps as possible, which can then be automated.
Get early into the habit of being lazy.

# Lesson 6.1: THE OPEN COMMAND

** Press  «o»  to open a line below the cursor and place you in Insert mode. **

You can create a new line and enter insert mode immediately using this one
operator.

  1. Move the cursor to the line below marked --->.

  2. Type the lowercase letter «o» to [open](o) up a line BELOW the cursor and place
     you in Insert mode.

  3. Now type some text and press <Esc> to exit Insert mode.

---> After typing  o  the cursor is placed on the open line in Insert mode. {expect:NULL}

  4. To open up a line ABOVE the cursor, simply type a [capital O](O), rather
     than a lowercase «o».  Try this on the line below.

---> Open up a line above this by typing O while the cursor is on this line. {expect:NULL}

This is faster and more repeatable than moving to the end of a line,
entering append mode and adding a new line.

# Lesson something.something: DELETING

** Press «d» and «D» to delete text **

  1. Move the cursor to the first line below marked --->.

  2. Move the cursor to the beginning of a word that needs to be deleted.

  3. Type [«d»](d)[«w»](w) to make the word disappear.

---> There are a some words fun that don't belong paper in this sentence. {expect:There are some words that don't belong in this sentence.}
---> There are a some words that don't belong in this sentence. {expect:There are some words that don't belong in this sentence.}

  4. Now try deleting two words at a time using a count: Position the cursor on
     the beginning of "two" and type «2dw»

---> There are too many words in this sentence. {expect:There are words in this sentence.}
---> There are words in this sentence. {expect:There are words in this sentence.}

  4. On the line below move the curse behind the period. We don't want anyone
     to read the second sentence, so move the cursor behind the period and hit
     [«D»](D) to delete until the end of the line.

---> The report will be done by Thursday. I hate my job so much... {expect:The report will be done by Thursday.}

The operator [«d»](d) stands for "delete" and deletes according to a motion. If
we type «dw» it will delete anything up until the beginning of the next word.
We can use any other motion as well, so «de» will delete until including the
last character of the current word, «dh» will delete the character left from the
cursor and «dl» will delete the character under the cursor, similar to «x». Go
ahead and try the «d» command with all the motions you have learned so far.

# Lesson something.something: CHANGING TEXT

** The «c» operator deletes text and places us in insert mode. **

  1. Place the cursor at the beginning of a word you want to change.

  2. Press «ce» or «cw» to change the word without affecting the surrounding whitespace.

---> This lubw has a few wptfd that mrrf changing usf the change operator. {expect:This line has a few words that need changing using the change operator.}
---> This line has a few words that need changing using the change operator. {expect:This line has a few words that need changing using the change operator.}

  3. We want to change the last sentence. Move the cursor behind the first
     period and press «C», enter to correct sentence and leave inster mode.

---> The report will be done by Thursday. I hate my job so much... {expect:The report will be done by Thursday. This is the best job ever!}
---> The report will be done by Thursday. This is the best job ever! {expect:The report will be done by Thursday. This is the best job ever!}

The «c» operator is like deleting a piece of text with the «d» operator and
then entering instert mode via «i». However, having an operator that does both
in one step makes the action more repeatable.

One word of caution: the «c» operator is somewhat of an anomaly when used with
the «w» motion. Usually that motion would move to the beginning of the next
word, but in this particular case it acts like the «e» motion. This is
conscious design choice by the Vim developers, not a bug.

# Lesson something.something: REPLACING TEXT

** The «r» operator overwrites a character and «R» overwrites multiple ones **

When we want to correct only one character it would be too much work to enter
and exit insert mode just for that.

  1. Position your cursor on a wrong character.

  2. Type «r» followed by the correct character to replace it.

  3. Repeat for the remaining characters.

---> Whan this lime was tuoed in, someone presswd some wrojg keys! {expect:When this line was typed in, someone pressed some wrong keys!}
---> When this line was typed in, someone pressed some wrong keys! {expect:When this line was typed in, someone pressed some wrong keys!}

If we have many characters to replace it would be cumbersome and unrepeatable
to hit «r» every time. There is a supercharged version of the operator.

  1. Move the cursor to the beginning of the first "xxx".

  2. Now press «R» ([capital R](R)) and type the number below it in the second line, so that it
     replaces the "xxx".

  3. Write over the existing characters. If you make a mistake press backspace
     to restore the character.

  3. Press <Esc> to leave [Replace mode](mode-replace).  Notice that the rest of the line
     remains unmodified.

  4. Repeat the steps to replace the remaining xxx.

---> Adding 123 to xxx gives you xxx. {expect:Adding 123 to 456 gives you 579.}
---> Adding 123 to 456 gives you 579. {expect:Adding 123 to 456 gives you 579.}


# Lesson something.something: BEGINNING AND END OF LINE MOTIONS

Often times we want to do something with the beginning or the end of a line.
There are two particular motions for this: «0» and «$».

  1. Move your cursor on the first letter of the word "This".

  2. Press «d0» to delete everything until the beginning of the line.

  3. Press «$» to jump to the end of the line and press «i» to insert the
     missing word.

---> asdf This is a. {expect:This is a sentence.}
---> This is a sentence. {expect:This is a sentence.}

These two motions can be combined with any of the previous operators to affect
everything on the line before or after the cursort. You can also use them to
jump the cursor quickly around.

We have already met the «D» and «C» operators which act exacly the same way as
«d$» and «c$», so which one should you use? They are both equally repeatable
because both are only once action, but the former require fewer keystrokes.


# Lesson something.something: CHARACTER- AND LINEWISE MOTION

** The «l» motion operates on a single character and «_» on the line **

  1. Position your cursor on the p in "mption".

  2. Press «cl» to enter insert mode, make the correction and exit back.

---> Every mption we learn allows construction of new actions. {expect:Every motion we learn allows construction of new actions.}
---> Every motion we learn allows construction of new actions. {expect:Every motion we learn allows construction of new actions.}

Since this is a very common motion you can also use the space bar, it has the
same effect. Pick whichever you prefer.

Now let's try the line-wise motion.

  1. Position your cursor anywhere on the line below.

  2. Press «d_» to delete the entire line.

---> This line has to go. {expect:NULL}

Line-wise actions are very common and so there is a special convention: use the
operator as motion as well to affect the entire line.

  1. Press «cc» To change the contents of the entire line.

---> Change this line. {expect:This is the way it should be.}
---> This is the way it should be. {expect:This is the way it should be.}

This is generally preferrable to the underscore motion above. Ultimately it
makes no difference, but most instructions you will come across use the doubled
form.


# Lesson something.something: FIND MOTION

** The «f» and «t» motions can jump to a particular character **

We have already learned about word-wise motions, but what if we want to make
even bigger jumps? We can specify a character to jump to. We can repeat the
jump with «;» or with «,» in the other direction.

  1. Move the cursor to the beginning of the line.

  2. Press «fu» to jump to the first occurence of the 'u' character.

  3. Oops, we haven't reached our target yet. Press «;» to repeat the search.

  4. Now change the word.

---> The brown fox jumps under the lazy dog. {expect:The brown fox jumps over the lazy dog.}
---> The brown fox jumps over the lazy dog. {expect:The brown fox jumps over the lazy dog.}

If we don't want to include the character we have searched for we can use the
«t» motion. It stands for "'til" as in "until".

  1. Place the cursor at the first character of the sequence to change.

  2. Press «ct» to change 'til the period.

---> This sentence was good until I lost it. {expect:This sentence is just right.}
---> This sentence is just right. {expect:This sentence is just right.}

We can also perform these motion in the other direction using their upper-case
variants. This time the upper-case does not supercharge the motion, it does its
opposite. That's also common convention. Try it out:

  1. Place the cursor at the end of the sentence.

  2. Press «cFu» to jump backwards and change the sentence.

---> The brown fox jumps under the bus. {expect:The brown fox jumps over the lazy dog.}
---> The brown fox jumps over the lazy dog. {expect:The brown fox jumps over the lazy dog.}

It is not always a good idea to search for the character we want. If it's a very
common character we will waste keystrokes skipping over the false positives.
Often times it's better to jump to a nearby but less common character and then
correct the position by one or two.

# Lesson something.something: UNDO, REDO AND REPEAT

** We can undo and redo changes. More imporantly though, we can repeat them **

To undo a change press «u», press <C-R> to redo it again.

  1. Make some change to the line to break it.

  2. Undo your change by pressing «u».

  3. You can re-apply the change pressing «C-R».

---> Everything is great. {expect:Everything is great.}

In the lessons above I have been metioning repeatability of actions and here is
where it comes into play. We can repeat any last action using the period «.»
operator.

  1. Navigate to the first wrong word and change it with «ce».

  2. After the change exit insert mode immediately and jump to the next word.

  3. Now press «.» and see the change take effect immediately.

---> Roses are blue, and tomatoes are blue as well. {expect:Roses are red, and tomatoes are red as well.}
---> Roses are red, and tomatoes are red as well. {expect:Roses are red, and tomatoes are red as well.}

An action consits of a count, an operator and a motion, you know that already.
What I did not tell you is that everything you type in insert mode is part of
the action as well. This means you can repeat entire phrases, sentences or even
paragraphs. The only catch is that you cannot leave insert mode or it ends the
action.

The dot is still very powerful because it assigns itself automatically and you
should use it whenever the possibility arises. Like most other operators it can
be combined with a motion.

## Lesson something.something: THE PUT COMMAND

** Type «p» to put previously deleted text after the cursor. **

The «p» operator can put previously deleted text after the cursor, and the
upper-case variant places it in front of the cursor.

  1. Type «dd» on the d) line to delete it.

  2. Move the cursor to the c) line, above where the deleted line should go.

  3. Type «p» to put the line below the cursor.

  4. Now delete the a) line below and move the cursor to the b) line.

  5. Type «P» to put the line above the cursor.

---> d) Can you learn too? {expect:NULL}
---> b) Violets are blue, {expect:NULL}
---> c) Intelligence is learned, {expect:NULL}
---> a) Roses are red, {expect:NULL}

The deleted text is stored in a so-called register, memory holding some text
temporarliy, and always contains the last deletion or yank (see next lesson).
You will later learn about custom registers you can assign yourself. This
operator allows you to transplant blocks of text at any size.

# Lesson something.something: COPY AND PASTE TEXT

** Use the  y  operator to copy text and  p  to paste it **

The operator «y» stands for "yank", it's essentially the same as "copy" in
other editors. After yanking the text we can put it somewhere else.

  1. Place the cursor somewhere on the line marked "a)".

  2. Type «yy»  to [yank](yank) (copy) the endtire line.

  4. Now press «p» to [put](put) (paste) end line below the cursor.

  5. You can go ahead and fix the two wrong word.

---> a) this is the first item.


---> a) this is the first item.
---> b) this is the second item. {expect:b) this is the second item.}

Like other operators «y» can be be used with a count to yank for example several
words in one go: «2yw» would yank two words and «2yy» would yank two lines.


# Lesson something.something: MOTIONS INSIDE AND AROUND

** Use the «i» motion inside something and «a» around **

Often times your cursor will not be at the edge of a piece of text you want to
edit. It would be a waste of time to always have to jump to the beginning, so
we can use «i» (inside) and «a» (around) in that case.

  1. Place the cursor somewhere in the messed up word.

  2. Type «ciw» or «caw» to change the word.

---> My aksdhfahj pet is my dog. {expect:My favourite pet is my dog.}
---> My favourite pet is my dog. {expect:My favourite pet is my dog.}

For words it doesn't matter whether you use inside or around because a word is
bordered by its own charaters. The mnemonic is easy to remember as "change a
word".

There are cases though where it does matter which one you use.

  1. Place the cursor somewhere inside the quotation marks.

  2. Type «ci"» to change the contents of the quotation marks, but not the marks.

---> The "white cat leaps" over the lazy dog. {expect:The "brown fox jumps" over the lazy dog.}
---> The "brown fox jumps" over the lazy dog. {expect:The "brown fox jumps" over the lazy dog.}

  3. Now type «ca"» instead: The quotation marks will be changed as well.

---> The "white cat leaps" over the lazy dog. {expect:The brown fox jumps over the lazy dog.}
---> The brown fox jumps over the lazy dog. {expect:The brown fox jumps over the lazy dog.}

You can also motion inside/around parentheses, brackets or braces. Basically, if
you think something can surround text try this motion. Using this motion saves
you the jumping back and forth and makes the action more repeatable.

# Lesson 4.1: CURSOR LOCATION AND FILE STATUS

** Type <Ctrl-g> to show your location in the file and the file status.
Type  «G»  to move to a line in the file. **

NOTE: Read this entire lesson before executing any of the steps.

  1. Press <Ctrl-g>, a message will appear at the bottom of the page with the
     filename and the position in the file.  Remember the line number for Step
     3.

NOTE:  You may see the cursor position in the lower right corner of the screen
       This happens when the ['ruler']('ruler') option is set (see  :help 'ruler'  )

  2. Press [«G»](G)  to move you to the bottom of the file.
     Type  [«gg»](gg)  to move you to the start of the file.

  3. Type the number of the line you were on and then  «G» .  This will
     return you to the line you were on when you first pressed <Ctrl-g>.

  4. If you feel confident to do this, execute steps 1 through 3.

# Lesson 4.3: MATCHING PARENTHESES SEARCH

** Type  %  to find a matching ),], or } . **

  1. Place the cursor on any (, [, or { in the line below marked --->.

  2. Now press the [«%»](%) key.

  3. The cursor will move to the matching parenthesis or bracket.

  4. Type «%» to move the cursor to the other matching bracket.

  5. Move the cursor to another (,),[,],{ or } and see what  %  does.

---> This ( is a test line with ('s, ['s ] and {'s } in it. )) {expect:NULL}

NOTE: This is very useful in debugging a program with unmatched parentheses!


# Conclusion

So far we have learned how to do basic text operation, we know how to navigate
text quickly, how to insert text and finally we learned how to transplant text.
We have also learned that Vim actions are actually sentences constructed
acctording to a grammar. Learning how to express our thoughts in this Vim
language is the key to getting really producive, allowing you to execute
actions as fast as you can think them.

=========  =================        ========  ========================
 Motion          Effect             Operator  Effect
=========  =================        ========  ========================
   «h»     left                       «x»     Delete current character
   «j»     down                       «i»     Insert before cursor
   «k»     up                         «a»     Append after cursor
   «l»     right                      «o»     Open a new line
   «w»     next word                  «d»     Delete text with motion
   «e»     end of word                «y»     Yank text with motion
   «b»     beginning of word          «c»     Change text with motion
   «0»     beginning of line          «r»     Replace character/text
   «$»     end of line                «u»     Undo action
   «l»     current character         <C-R>    Redo action
 <SPACE>   current character          «p»     Put yanked/deleted text
   «_»     current line             ========  ========================  
   «f»     fing character
   «t»     'till character         Pressing an operator twice acts as
   «i»     inside something        a motion on the entire line.
   «a»     around something
   «g»     first line
   «G»     last line
   «%»     matching braces
===«=»===  =================



# Part 2: EX COMMANDS

** Command mode is where we can execute powerful commands **

You have already met command-mode before when you quit Vim. First you press
«:», then you enter your command and possibly some arguments and hit <CR> to
execute it. Executing a command puts us back into normal mode.

The name "ex command" has no particular reason, it is a historical leftover
from a previous UNIX text editor called "ex". Ex was a predecessor to vi, which
is a predecessor to Vim, and was operated exclusively using such commands.

While in command mode you can auto-complete the same way as in the shell by
hitting the <TAB> key. While typing a command you can press <C-D> to list
possible suggestions.

# Lesson 2.1: WRITING AND CLOSING A FILE

** Use the ':write' command to write the current file and ':quit' to close it. **

You have already met 'quit' when you quit Vim. If you have a file open you can
use ':write' to save it to disc, assuming the file is not write-protected.

To close a file use the ':quit' command. If the file has been edited Vim will
not allow you to close it, this is to protect you from losing you changes by
accidently closing. You can force a quit by supercharging the command with an
exclamation mark: 'quit!'. This is a common convention, similar to the upper
case for operators.

Now it a good time to try it out. Close this file and then re-open it the same
way you did last time.

Typing out ':write' and ':quit' every time is cumbersome, so pretty much every
ex command can be shortened. The shortes unambiguous part does the job, so you
could also write ':wri' and get the same results. On top of that many commands
also have special abbreviations. You will always see ':w' and ':q' written.

To write and close a file in one go use ':wq'.

You can close all open files with 'qall' or 'qa' and write all files with
':wall' or ':wa'. And you might have guessed it already, use ':wqall' or 'wqa'
to write and quit all files.

A file is saved under the same name it already has, to save it as a new file
enter a file name as an argument: ':w newfile.txt'

# Lesson 2.2: NEW AND EXISTING FILES

** Use ':new' and 'edit' to open new or existing files **

  1. Type ':new' to open a new window. Try it out right now, you will see a new
     window pop up.

  2. Now type in some text and save the file under some name (':w newfile.txt').
     Quit the file.

  3. Open a new window again.

  4. Type ':edit newfile.txt' to open the file again. You can also abbreviate
     it to ':e'.

If you want to open a file in a vertical window rather than a horizontal
prepent a 'v' to the command: ':vnew'.

# Lesson 2.3: SPLITTING A VIEW

** Use ':split' and 'vsplit' to split a window **

  1. Type ':split' and see your file split in two horizontally.

  2. Now type ':vsplit' to split a windo vertically.

  3. You can close the windows again with the ':q' command.

Split windows are still the same file, so any changes in one window apply to
other windows as well.

# Lesson 2.4: THE WORKING DIRECTORY

** Use ':pwd' to print the current working directory **

  1. Type ':pwd' and the command line will show the path in the command line.

Vim is usually run from a terminal emulator, but even when you are using a GUI
you still have a working directory. Every path and every file name is relative
to it. We'll learn how to change it in a second.

# Lessong 2.5: EXECUTING EXTERNAL COMMANDS

** Vim provides a shell to execute external commands **

You can use any command for your operating system by prepending it with an
exclamation mark.

  1. Type ':!ls' and you will get the contents of the working directory printed.

  2. Type ':!cd' with an argument to change the working directory.

  3. Type ':!rm' with an argument to delete a file.

The shell is very limited and only good for such simple commands. Don't try
running a REPL or another instance for Vim that way.

Of course you can try it out if you are really curious. Type ':!vim' and watch
your screen turn into a mess. You can type ':q' to get back.

# Lesson 2.6: RETRIEVING AND MERGING FILES

** Use ':r' to read contents of a fil into the current file **

If you want to append the contents of a file to an open file use the ':r'
command.

  1. Place the cursor on the marked file below.

  2. Type ':r' and the current file will be pasted below.

---> Paste file below this.

If you provide a file as an argument that file will be appended. We can do
something more useful though:

  1. Place the cursor on the marked file below.

  2. Type ':r !ls' to paste the result of a shell command.

---> Contents of the working directory:

Now you can work with the output of the shell.

# Lesson 2.7 THE SUBSTITUTION COMMAND

** The ':s/old/new/g' command can find and replace text **

  1. Move the cursor to the line below.

  2. Type
~~~ viml
     :s/thee/the <Enter>
~~~
     NOTE that the [:s](:s) command only changed the first occurrence of
     "thee" in the line.

---> thee best time to see thee flowers is in thee spring. {expect:the best time to see the flowers is in the spring.}

  3. Undo your change and type
~~~ viml
     :s/thee/the/g
~~~
     Adding the g [flag](:s_flags) means to substitute globally in the line, change
     all occurrences of "thee" in the line.

The substitution command is followed by a pattern to search for, then the
replacement and finally a series of option flags. There are other flages as
well, but 'g' is the most important one. The pattern is a regular expression,
but in this example we used the literal string we wanted.

Here are a few more examples of what is possible with the substitute command:

  4. To change every occurrence of a character string between two lines, type
~~~ viml
     :#,#s/old/new/g
~~~
     where #,# are the line numbers of the range of lines where the substitution is to be done.

     Type
~~~ viml
     :%s/old/new/g
~~~
     to change every occurrence in the whole file.

     Type
~~~ viml
     :%s/old/new/gc
~~~
     to find every occurrence in the whole file, with a prompt whether to substitute or not.

# Lesson 2.8: THE SET OPTION COMMAND

** Setting Vim options is done using a command **

  1. Type ':set list' to make Vim display whitespace characters.

  2. Type ':set nolist' to make Vim hide whitespace characters.

  3. Type ':set list!' to toggle the option on and off.

  4. Type ':set list?' to print the current state of the option.

Most options in Vim are boolean values. The syntax for set set command is
~~~ viml
     :set [no]option
~~~
where 'option' is the name of the option. The option name without prefix always
turns it on and with the 'no' prefix always turns it off. The exclamation mark
postfix always toggles between on and off.

Some actions take values instead:

  5. Type ':set foldcolumn=4' to make Vim display a column to the right

You can also reset any option to its default:

  6. Type ':set foldcolumn&' to reset.

There are more ways to manipulate options, see the help manual for all of them.
Check the manual for the option as well, usually there is an abbreviated form
of them as well.

# Lesson 2.9: SEARCH MODE

** Type «/» followed by a pattern to search for the pattern. **

This is not really a command but it fits here. Press the «/» key and type the
word "fox". The cursor will jump to the word on the line below.

---> The brown fox jumps over the lazy dog.

We can repeat this search using the «n» (next) operator. You will cycle through
all the matches, so keep pressing it until you are back here. To search in the
other direction use «N».

We can also issue a search in the opposite direction using the «?» key. Search
again for the word "fox". (or at least we could if it wasn't for this plugin)
Try it out.

As you have seen the «n» and «N» keys are now reversed as well. It's easier to
issue one backwards search and then keep hitting «n» than hitting «N»
repeatedly.

The pattern does not have to be just a word, it can be any regular expression.
Try searching for "f.x". You will find matches for both "fox" and "fix".


# Summary

asdf


# Part 3: VISUAL MODE

Visual mode is similar to selecting text in other text editors. We define a
visual selection over a piece of text and execute and action or command over
that selection.

# Lesson 3.1: VISUAL MODE

** Press «v» to select a sequence of text **

  1. Move the cursor on first character of the first word to change.

  2. Press «v» to enter visual mode.

  3. Use the motions you know to move the selection to the last character of
     the last word to change.

  4. Press «c» to change the selected portion of text.

---> Vim is a horribly complicated to use text editor. {expect:Vim is a very efficient and productive text editor.}
---> Vim is a very efficient and productive text editor. {expect:Vim is a very efficient and productive text editor.}

We want to change as much text as possible, and counting words is slow. Visual
mode allows us to make an exact selection before applying our action.

You can use counts on the motions when defining your selection, but when
performing the operation we cannot. There is no reason anyway, the selection
takes the place of count and motion.

Visual mode is very nice, but don't overuse it. Take the following example:

---> Vim's usability is an utter and complete mess conceived by madmen. {expect:Vim's usability allows users to edit text as fast as they think.}
---> Vim's usability allows users to edit text as fast as they think. {expect:Vim's usability allows users to edit text as fast as they think.}

It is faster to position the cursor on the first wrong word and then change
'til the period using «c»«t»«.».

# Lesson 3.2: VISUAL LINE MODE

** Select entire lines with «V» **

There are two pairs of lines wrong. We don't want to fix them one at a time, so
we'll transplant two lines at a time.

  1. Move the cursor on the first line.

  2. Press «V» to select the entire line. Move to cursor down.

  3. Press «d» to delete the selection, move to cursor on the second line.

  4. Press «p» to put the two lines below the cursor.

---> c) Intelligence is learned, {expect:NULL}
---> d) Can you learn too? {expect:NULL}
---> a) Roses are red, {expect:NULL}
---> b) Violets are blue, {expect:NULL}

We could have used «2dd» here as well, but in practice we will often have to
transplant entire paragraphs consisting of tens of lines.

# Lesson 3.3: VISUAL BLOCK MODE

** We can also select a rectangular slice of text. **

  1. We want to change the prefix all these items. Move the cursor to the first
     '\'.

  2. Press <C-V> to enter visual mode.

  3. Move the cursor down and right to cover all prefixes.

  4. Press «c» to change the prefix to "-". When you exit insert mode the
     change will be applied to the entire selection.

---> \item Apple {expect:* Apple}
---> \item Banana {expect:* Banana}
---> \item Orange {expect:* Orange}
---> \item Pear {expect:* Pear}
---> \item Lemon {expect:* Lemon}

# Lesson 3.4: executing commands on visual selections

** We can execute a command over only the selected part **

  1. Select the sentence visually

  2. Press «:» to enter command mode. The command will already be be prefixed
     with a range: ':'<,'>'

  3. Compete the command to read ':'<,'>w selection.txt' and press enter to
     save only the selected slice to a file.

---> Select this sentence.

The strings "'<" and "'>" act as delimiters for a range: the range of the
visual selection. Most commands can operate on a range.

# Summary

asdf















# Lesson 4 SUMMARY

  1. <Ctrl-g>  displays your location in the file and the file status.
             «G»  moves to the end of the file.
     number  «G»  moves to that line number.
            «gg»  moves to the first line.

  2. Typing «/» followed by a phrase searches FORWARD for the phrase.
     Typing «?» followed by a phrase searches BACKWARD for the phrase.
     After a search type  «n»  to find the next occurrence in the same direction
     or  «N»  to search in the opposite direction.
     <Ctrl-o> takes you back to older positions, <Ctrl-i> to newer positions.

  3. Typing  «%» while the cursor is on a (,),[,],{, or } goes to its match.

  4. To substitute new for the first old in a line type
~~~ viml
        :s/old/new
~~~
     To substitute new for all 'old's on a line type
~~~ viml
        :s/old/new/g
~~~
     To substitute phrases between two line #'s type
~~~ viml
        :#,#s/old/new/g
~~~
     To substitute all occurrences in the file type
~~~ viml
        :%s/old/new/g
~~~
     To ask for confirmation each time add 'c'
~~~ viml
        :%s/old/new/gc
~~~


# Lesson 5 SUMMARY

  1.  [:!command](:!cmd)  executes an external command.

      Some useful examples are:
      :!ls        -  shows a directory listing
      :!rm FILENAME   -  removes file FILENAME

  2.  [:w](:w) FILENAME  writes the current Vim file to disk with name FILENAME.

  3.  [«v»](v)  motion  :w FILENAME  saves the Visually selected lines in file
      FILENAME.

  4.  [:r](:r) FILENAME  retrieves disk file FILENAME and puts it below the
      cursor position.

  5.  [:r !dir](:r!) reads the output of the dir command and puts it below the
      cursor position.

# Lesson 6 SUMMARY

  1. Type «o» to open a line BELOW the cursor and start Insert mode.
     Type «O» to open a line ABOVE the cursor.

  2. Type «a» to insert text AFTER the cursor.
     Type «A» to insert text after the end of the line.

  3. The «e» command moves to the end of a word.

  4. The «y» operator yanks (copies) text,  p  puts (pastes) it.

  5. Typing a capital «R» enters Replace mode until  <Esc>  is pressed.

  6. Typing "[:set](:set) xxx" sets the option "xxx".  Some options are:
    'ic' 'ignorecase'   ignore upper/lower case when searching
    'is' 'incsearch'    show partial matches for a search phrase
    'hls' 'hlsearch'    highlight all matching phrases
     You can either use the long or the short option name.

  7. Prepend "no" to switch an option off:
        :set noic

  8. Prepend "inv" to toggle an option:
        :set invic

# Lesson 7.1: GETTING HELP

** Use the on-line help system **

Vim has a comprehensive on-line help system.  To get started, try one of
these three:
    - press the <HELP> key (if you have one)
    - press the <F1> key (if you have one)
    - type
        :help <Enter>

Read the text in the help window to find out how the help works.
Type  <Ctrl-w><Ctrl-w>   to jump from one window to another.
Type  :q <Enter>    to close the help window.

You can find help on just about any subject, by giving an argument to the
":help" command.  Try these (don't forget pressing <Enter>):
~~~ viml
    :help w
    :help c_CTRL-D
    :help insert-index
    :help user-manual
~~~
# Lesson 7.2: CREATE A STARTUP SCRIPT

** Enable Vim features **

Vim has many more features than Vi, but most of them are disabled by
default.  To start using more features you have to create a "vimrc" file.

  1. Start editing the "vimrc" file.  This depends on your system:
    :e ~/.nvimrc     for Unix-like systems
    :e $VIM/_vimrc      for Microsoft Windows

  2. Now read the example "vimrc" file contents:
    :r $VIMRUNTIME/vimrc_example.vim

  3. Write the file with:
    :w

  The next time you start Vim it will use syntax highlighting.
  You can add all your preferred settings to this "vimrc" file.
  For more information type  :help vimrc-intro

# Lesson 7 SUMMARY

  1. Type  :help  or press <F1> or <Help>  to open a help window.

  2. Type  :help cmd  to find help on  cmd .

  3. Type  <Ctrl-w><Ctrl-w>  to jump to another window

  4. Type  :q  to close the help window

  5. Create a vimrc startup script to keep your preferred settings.

  6. While in command mode, press <Ctrl-d> to see possible completions.
     Press <Tab> to use one completion.

# CONCLUSION

This was intended to give a brief overview of the Vim editor, just enough to
allow you to use the editor fairly easily. It is far from complete as Vim has
many many more commands.  Consult the help often.

Now, you can try a different tutorial:
To proceed to the next tutorial, enter the following command

    :Tutor 02-vim-intermediate

There are many resources online to learn more about vim. Here's a list of a bunch of them:

- Learn Vim Progressively: http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/
- Learning Vim in 2014: http://benmccormick.org/learning-vim-in-2014/
- Vimcasts: http://vimcasts.org/
- Vim Video-Tutorials by Derek Wyatt: http://derekwyatt.org/vim/tutorials/
- Learn Vimscript the Hard Way: http://learnvimscriptthehardway.stevelosh.com/
- 7 Habits of Effective Text Editing: http://www.moolenaar.net/habits.html

If you prefer a book, Practival Vim by Drew Neil is recommended often.

This tutorial was written by Michael C. Pierce and Robert K. Ware, Colorado
School of Mines using ideas supplied by Charles Smith, Colorado State
University.  E-mail: bware@mines.colorado.edu.

Modified for Vim by Bram Moolenaar.
Modified fov vim-tutor-mode by Felipe Morales.
