# CREATING A VIM TUTORIAL WITH VIM-TUTOR-MODE

This tutorial will guide you thrugh the steps required to create a tutorial
file for vim-tutor-mode. It is also meant as a demo of vim-tutor-mode 
capabilities.

Table of contents:

- [Setting up](*setting-up*)
- [vim-tutor-mode's markup](*markup*)
    - [emphasis](*emphasis*)
    - [headers](*headers*)
    - [links](*links*)
    - [codeblocks](*codeblocks*)
- [Interactive elements](*interactive*)
    - [expect](*expect*)

## SETTING UP *setting-up*

First, you'll need to enable "debug" mode
~~~ viml
    let g:tutor_debug = 1
~~~
This will allow saving changes to the tutor files and will disable conceals, so
you can more easily check your changes. It will also disable ['cursorline'](cursorline). 

After this, create a new .tutor file (we will be practicing on this very file, so you
don't need to do this now):
~~~ viml
    e new-tutorial.tutor
~~~
## VIM-TUTOR-MODE's MARKUP *markup*

vim-tutor-mode uses a special markup to format the tutorials. If you've worked
with markdown, it will surely feel familiar, although it doesn't support many
features. This section will show you what is supported.

### Emphasis *emphasis*

Emphasis in vim-tutor-mode is semantics-based. For example, lesson's
descriptions are emphasized by surrounding some text with "\*\*" or "\!\!", like
here

    \*\* text \*\*

which is displayed like

    ** text **

NOTE the space between the marks and the text is required.

1. Format the line below so it becomes a lesson description:

---> This is a lesson description {expect:** This is a lesson description **}
---> ** This is a lesson description ** {expect:** This is a lesson description **}

Some words (TODO NOTE IMPORTANT TIP ATTENTION) will also be highlighted. You
don't need to mark them specially. 

2. Turn the line below into a TODO item:

---> Document '&variable' {expect:TODO: Document '&variable'}
---> TODO: Document '&variable' {expect:TODO: Document '&variable'}

### Headers *headers*

3. Practice fixing the lines below:

---> This is a level 1 header {expect:# This is a level 1 header}
---> # This is a level 1 header {expect:# This is a level 1 header}
---> This is a level 3 header {expect:### This is a level 3 header}
---> ### This is a level 3 header {expect:### This is a level 3 header}
---> This is a header with a label {expect:# This is a header with a label {*label*}}
---> # This is a header with a label {*label*} {expect:# This is a header with a label {*label*}}

4. Now, create a 4th level section here, and add a label:    *exercise-4*

   ATTENTION We will use this label later, so remember it.

### Links *links*

It is good practice to include links in your tutorials to reference materials,
like vim's own help or external documents. You can also link to other parts of
the document.

#### Help links

5.  

---> A link to help for the 'breakindent' option {expect:A link to help for the ['breakindent']('breakindent') option}
---> A link to help for the ['breakindent']('breakindent') option {expect:A link to help for the ['breakindent']('breakindent') option}

#### Section links

6. 

---> A link to the Links section {expect:A link to the [Links](*links*) section}
---> A link to the [Links](*links*) section {expect:A link to the [Links](*links*) section}

7. Now, create a link to the section you created on [exercise 4](*exerciser-4*)
   above.


### Codeblocks *codeblocks*

8.

--->  {expect:~~~ viml}
--->  {expect:echom "the value of &number is".string(&number)}
--->  {expect:~~~}

---> ~~~ viml {expect:~~~ viml}
---> echom "the value of &number is".string(&number) {expect:echom "the value of &number is".string(&number)}
---> ~~~ {expect:~~~}

9.

--->  {expect:~~~ normal}
--->  {expect:d2w}
--->  {expect:~~~}

---> ~~~ normal {expect:~~~ normal}
---> d2w {expect:d2w}
---> ~~~ {expect:~~~}

10. 

---> d {expect:«d2w»}
---> «d2w» {expect:«d2w»}

11. 

--->  {expect:   :buffers}
--->    :buffers {expect:   :buffers}

12. 

--->  {expect:   $ ls}
--->    $ ls {expect:   $ ls}

## INTERACTIVE ELEMENTS *interactive*

### expect *expect*

13. 

---> this is not right {expect:---> this is right} |expect:---> this is right {expect:---> this is right}|
---> ---> this is right {expect:---> this is right} |expect:---> this is right {expect:---> this is right}|

14.

---> this is some text |expect:---> this is some text {expect:NULL}|
---> ---> this is some text {expect:NULL} |expect:---> this is some text {expect:NULL}|
