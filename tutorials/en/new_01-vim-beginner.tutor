#             Welcome   to   the   VIM   Tutor

Vim is a very powerful text editor that has many commands. Unlike most
text editors where you use the keyboard to enter text and arrow keys to
move your cursor, in Vim you use the keyboard to enter commands to
manipulate text. These commands allow you to express complex thoughts in
just a few keystrokes to move through text and manipulate it much faster
than in most text editors.

These commands form a sort of language with its own grammar. This tutor
is designed to describe enough of the commands that you will be able to
easily use Vim as an all-purpose editor. It is important to remember
that it is set up to teach by use. That means you need to do the exer-
cises to learn them properly. If you only read the text, you will soon
forget what is most important!

To scroll the text press `j`{normal} to move to cursor down or `k`{normal} to move the cur-
sor up.

NOTE: The commands in the lessons will modify the text, but those
changes won't be saved.  Don't worry about messing things up; just re-
member that pressing [`<Esc>`](<Esc>) and then [u](u) will undo the latest change.

This tutorial is interactive, and there are a few things you should
know. Pressing [`<Enter>`](<Enter>) over text highlighted [like this](holy-grail) will take you
to some relevant help (hopefully), and pressing ? over any word will try
to do so too.  You can close the help window by pressing `q`{normal}. Sometimes
you will be required to modify text like

--->  this here {expect:this here}

Once you have done the changes correctly, the ✗ sign at the left will
change to ✓. We imagine you can already see how neat Vim can be ;)
Other times, you'll be prompted to run a command (we will explain this
later):
~~~ cmd
    :help <Enter>
~~~
or press a sequence of keys
~~~ norm
    <Esc>0f<SPACE>d3wP$P
~~~
Text within angle brackets (like `<Enter>`{normal}) describes a key to press in-
stead of text to type.

Now, make sure that your Shift-Lock key is NOT depressed and press the `j`{normal}
key enough times to move the cursor so that Lesson 1.1 completely fills
the screen.

## Lesson 0.1: MOVING THE CURSOR

**To move the cursor, press the `h`{normal}, `j`{normal}, `k`{normal}, `l`{normal} keys as indicated. **

        ← ↓ ↑ →    Hint: The h key is at the left and moves left.
        h j k l          The l key is at the right and moves right.
                         The j key looks like a down arrow.


  1. Move the cursor around the screen until you are comfortable.

  2. Hold down the `j`{normal} key and move to the next lesson.


NOTE: If you are ever unsure about something you typed, press `<Esc>`{normal} to
      place you in Normal mode.  Then retype the command you wanted.

NOTE: The cursor keys should also work, but the `h`{normal} `j`{normal} `k`{normal} `l`{normal} keys have not
      been chosen arbitrarily, they are on the right-hand side of the
      home row, allowing you to mode the curse without taking youre hand
      off. Once getting used to `h`{normal} `j`{normal} `k`{normal} `l`{normal} you will be able to move around
      much faster. Really!

# Lesson 0.2: EXITING VIM

NOTE: Before executing any of the steps below, read this entire lesson

  1. Press the `<Esc>`{normal} key (to make sure you are in [Normal](Normal) [mode](vim-modes)).

  2. Type:

     `:q!`{vim} `<Enter>`{normal}

     This exits the editor, DISCARDING any changes you have made. The
     exclamation mark "supercharges" the [:q](:q) command.

  3. Open vim and get back here by executing the command that got you
     into this tutor. That might be:

     :Vimtutor `<Enter>`{normal}

  4. If you have these steps memorized and are confident, execute steps
     1 through 3 to exit and re-enter the editor.

NOTE:  The command  [:q!](:q) `<Enter>`{normal}  discards any changes you have made. In
       a few lessons you will learn how to save the changes to a file.

  5. Move the cursor down to Lesson 1.3.

# Part 1: COUNT, OPERATOR, MOTION -- ACTION

Before we continue we need to understand the concept of modal editing
first: most editors have two "modes", a mode where you enter text and a
mode where you visually select text.

You have already met two of Vim's modes so far: normal mode which is the
default mode of Vim where you move around the cursor, and command mode
when you entered the command to quit Vim. You will soon meet insert mode
which lets you type text and visual mode which lets you visually select
text. Out of these normal mode is where you will spend most of your
time.

Keyboard keys have different effects depending on the mode you are in:
pressing the `j`{normal} key in normal mode will move the cursor downwards, but
pressing the same key in insert mode will place a 'j' character in your
text.

The next important thing we need to keep in mind is how the syntax of
Vim commands works: unlike most editors where keyboard commands are just
shortcuts, Vim commands are part of a language with its own grammar and
vocabulary.

The structure of a "sentence" is *count* *operator* *motion*. Don't think too
much about if for now, all that is important to know is that once you
have learned a new vocable you can use it along with the ones you al-
ready know to construct completely new sentences. This is what makes Vim
so productive, you tell it exactly what it is you want to do. Soon a
sequence like this
~~~ normal
    <Esc>0f<SPACE>d3wP$P
~~~
will read to you like a regular sentence instead of a seemingly random
collection of letters and symbols.

So far You have learned four motions: `h`{normal}, `j`{normal}, `k`{normal} and `l`{normal}.

# Lesson 1.1: USING A COUNT FOR A MOTION

**Typing a number before a motion repeats it that many times. **

  1. Move the cursor to the start of the line marked ---> below.

  2. Type  `2l`{normal}  to move the cursor two characters forward.

  3. Type  `3h`{normal}  to move the cursor three character backwards.

  4. Type  `0`{normal}  ([zero](0)) to move to the start of the line.

  5. Repeat steps 2 and 3 with different numbers.

---> This is just a line with words you can move around in. {expect:ANYTHING}

Strictly speaking `0`{normal} on its own is not a count, it is a motion that moves
to the beginning of the current line, but a count can contain the digit
`0`. Typing `10j`{normal} will move the cursor ten lines down.

You can now move more than one character at a time, but constantly
typing in a count is cumbersome. There are better motions for moving
around.

# Lesson 1.2: WORD-WISE MOTION

**Moving word-wise can be faster than character-wise **

  1. Move the cursor to the start of the line marked ---> below.

  2. Press `w`{normal} to move the cursor to the first character of the next word.

  3. Press `e`{normal} to move the cursor to the last character of the current
     word.

  4. Press `b`{normal} to move the cursor to the first character of the current
     word or first character of the previous word.

  5. Now try to above commands by prepending a count: `2w`{normal}.

  6. Press `W`{normal}, `E`{normal} and `B`{normal}, moves across WORDs instead of words.

---> This is just a line with words you can move around in. {expect:ANYTHING}

The mnemonics of these operators have been chosen to be easy to re-
member: [w](w) stands for *word*, [e](e) stands for *end* and [b](b) stands for *beginning*.

But what do [W](W), [E](E) and [B](B) stand for? Vim knows of two different types of
"words": [word](word) and [WORD](WORD). A word is what you will want pretty much all the
time, because it is more restrictive, while a WORD is any sequence of
non-blank characters. Try it out, compare the lower-case motions with
their upper-case variants.

---> The string class.method is three words but only one WORD. {expect:ANYTHING}

For the exact definitions consult the help. This also goes to demons-
trate a common convention: an upper-case variant of an operator performs
a similar but "supercharged" version of the operator.

We will learn more motions later, but with these three you can already
move much faster through your text than if you were using the cursor
keys directly, especially if you combine them with a count. Character-
wise movement should only be used for small position adjustments from
now on.

## Lesson 1.3: TEXT EDITING - DELETION

**Press  `x`{normal}  to delete the character under the cursor. **

  1. Move the cursor to the line below marked --->.

  2. To fix the errors, move the cursor until it is on top of the
     character to be deleted.

  3. Press [the `x` key](x) to delete the unwanted character.

  4. Repeat steps 2 through 4 until the sentence is correct.

  5. Press `2x`{normal} to delete two characters at a time, starting with the
     character under the cursor.

---> The ccow jumpedd ovverrr thhhe mooon. {expect:The cow jumped over the moon.}

The `x`{normal} command is an operator, meaning it tells Vim to do something. You
can combine it with a count, but it does not take a motion, it always
operates on the character it is on. So you can tell it to delete two
characters, but not to delete the current word. We will use a different
operator for that.

# Lesson 1.4: TEXT EDITING: INSERTION

**Press  `i`{normal} and `I`{normal} to insert text. **

  1. Move the cursor to the first line below marked --->.

  2. To make the first line the same as the second, move the cursor on
     top of the first character AFTER where the text is to be inserted.

     Tip: use the `w`{normal} motion you learned before to jump to the beginning
          of the word where you want to insert.

  3. Press  [`i`](i)  and type in the necessary additions.

  4. As each error is fixed press `<Esc>`{normal} to return to Normal mode. Repeat
     steps 2 through 4 to correct the sentence.

---> There is text misng this . {expect:There is some text missing from this line.}
---> There is some text missing from this line. {expect:There is some text missing from this line.}

  5. You can use the upper-case version `I`{normal} to insert text at the begin-
     ning of the line regardless of where on the line your cursor is.
     Place the cursor anywhere on the line below and hit `I`{normal} to insert.

---> is some text missing from this line. {expect:There is some text missing from this line.}
---> There is some text missing from this line. {expect:There is some text missing from this line.}

The `i`{normal} operator does not take any count or motion, it drops us straight
into insert mode. There are actually operators that can take a cound and
motion before transitioning into insert mode, but they wouldn't make
sense here.

# Lesson 1.5: TEXT EDITING: APPENDING

**Press `a`{normal} and `A`{normal} to append text. **

  1. Move the cursor to the first line below marked --->.

  2. To make the first line the same as the second, move the cursor on
     top of the first character BEFORE where the text is to be inserted.

     Tip: use the `e`{normal} motion you learned before to jump to the end of the
     word where you want to append.

  3. As the text has been appended press `<Esc>`{normal} to return to Normal mode.

---> There is text misng this. {expect:There is some text missing from this line.}
---> There is some text missing from this line. {expect:There is some text missing from this line.}

  5. You can use the upper-case version `A`{normal} to append text at the end of
     the line regardless of where on the line your custor is. Place the
     cursor anywhere on the line below and hit `A`{normal} to append.

---> There is some text missing from th {expect:There is some text missing from this line.}
---> There is some text missing from this line. {expect:There is some text missing from this line.}

Appending is very similar to inserting, except it appends text after the
cursor. You will use both commands frequently, so you should get into
the habit of using both when they are appropiate. Don't use `li`{normal} (move
left, then insert) to append text, that is slower and less repeatable
than appending directly.  One core idea in Vim is to do tasks in as few
steps as possible, which can then be automated. Get early into the habit
of being lazy.

# Lesson 1.6: THE OPEN COMMAND

**Press `o`{normal} to open a line below the cursor and place you in Insert mode. **

You can create a new line and enter insert mode immediately using this
one operator.

  1. Move the cursor to the line below marked --->.

  2. Type the lowercase letter `o`{normal} to [open](o) up a line BELOW the cursor and
     place you in Insert mode.

  3. Now type some text and press `<Esc>`{normal} to exit Insert mode.

---> After typing o the cursor is placed on the open line in Insert mode. {expect:ANYTHING}

  4. To open up a line ABOVE the cursor, simply type a [capital O](O), rather
     than a lowercase `o`{normal}.  Try this on the line below.

---> Open a line above this by typing O while the cursor is on this line. {expect:ANYTHING}

This is faster and more repeatable than moving to the end of a line,
entering append mode and adding a new line. A new line created like
this will respect indentation rules.

# Lesson 1.7: DELETING

**Press `d`{normal} and `D`{normal} to delete text **

  1. Move the cursor to the first line below marked --->.

  2. Move the cursor to the beginning of a word that needs to be
     deleted.

  3. Type [`d`](d)[`w`](w) to make the word disappear.

---> There are a some words fun that don't belong paper in this sentence. {expect:There are some words that don't belong in this sentence.}
---> There are a some words that don't belong in this sentence. {expect:There are some words that don't belong in this sentence.}

  4. Now try deleting two words at a time using a count: Position the
     cursor on the beginning of "two" and type `2dw`{normal}

---> There are too many words in this sentence. {expect:There are words in this sentence.}
---> There are words in this sentence. {expect:There are words in this sentence.}

  4. On the line below move the curse behind the period. We don't want
     anyone to read the second sentence, so move the cursor behind the
     period and hit [`D`](D) to delete until the end of the line.

---> The report will be done by Thursday. I hate my job so much... {expect:The report will be done by Thursday.}

The operator [`d`](d) stands for "delete" and deletes according to a motion.
If we type `dw`{normal} it will delete anything up until the beginning of the next
word. We can use any other motion as well, so `de`{normal} will delete until in-
cluding the last character of the current word, `dh`{normal} will delete the
character left from the cursor and `dl`{normal} will delete the character under
the cursor, similar to `x`{normal}. Go ahead and try the `d`{normal} command with all the
motions you have learned so far.

# Lesson 1.8: CHANGING TEXT

**The `c`{normal} operator deletes text and places us in insert mode. **

  1. Place the cursor at the beginning of a word you want to change.

  2. Press `ce`{normal} or `cw`{normal} to change the word without affecting the surrounding
     whitespace.

---> This lubw has a few wptfd that mrrf changing usf the change operator. {expect:This line has sone words that need changing using the change operator.}
---> This line has sone words that need changing using the change operator. {expect:This line has sone words that need changing using the change operator.}

  3. We want to change the last sentence. Move the cursor behind the
     first period and press `C`{normal}, enter to correct sentence and leave
     insert mode.

---> The report will be done by Thursday. I hate my job so much... {expect:The report will be done by Thursday. This is the best job ever!}
---> The report will be done by Thursday. This is the best job ever! {expect:The report will be done by Thursday. This is the best job ever!}

The `c`{normal} operator is like deleting a piece of text with the `d`{normal} operator and
then entering instert mode via `i`{normal}. However, having an operator that does
both in one step makes the action more repeatable.

One word of caution: the `c`{normal} operator is somewhat of an anomaly when used
with the `w` motion. Usually that motion would move to the beginning of
the next word, but in this particular case it acts like the `e`{normal} motion.
This is conscious design choice by the Vim developers, not a bug.

# Lesson 1.9: REPLACING TEXT

**The `r`{normal} operator overwrites a character and `R`{normal} overwrites multiple ones **

When we want to correct only one character it would be too much work to
enter and exit insert mode just for that.

  1. Position your cursor on a wrong character.

  2. Type `r`{normal} followed by the correct character to replace it.

  3. Repeat for the remaining characters.

---> Whan this lime was tuoed in, someone presswd some wrojg keys! {expect:When this line was typed in, someone pressed some wrong keys!}
---> When this line was typed in, someone pressed some wrong keys! {expect:When this line was typed in, someone pressed some wrong keys!}

If we have many characters to replace it would be cumbersome and unre-
peatable to hit `r`{normal} every time. There is a supercharged version of the
operator.

  1. Move the cursor to the beginning of the first "xxx".

  2. Now press `R`{normal} ([capital R](R)) and type the number below it in the second
     line, so that it replaces the "xxx".

  3. Write over the existing characters. If you make a mistake press
     backspace to restore the character.

  3. Press `<Esc>`{normal} to leave [Replace mode](mode-replace).  Notice that the rest of the
     line remains unmodified.

  4. Repeat the steps to replace the remaining xxx.

---> Adding 123 to xxx gives you xxx. {expect:Adding 123 to 456 gives you 579.}
---> Adding 123 to 456 gives you 579. {expect:Adding 123 to 456 gives you 579.}

# Lesson 1.10: BEGINNING AND END OF LINE MOTIONS

Often times we want to do something with the beginning or the end of a
line. There are two particular motions for this: `0`{normal} and `$`{normal}.

  1. Move your cursor on the first letter of the word "This".

  2. Press `d0`{normal} to delete everything until the beginning of the line.

  3. Press `$`{normal} to jump to the end of the line and press `i`{normal} to insert the
     missing word.

---> asdf This is a. {expect:This is a sentence.}
---> This is a sentence. {expect:This is a sentence.}

These two motions can be combined with any of the previous operators to
affect everything on the line before or after the cursort. You can also
use them to jump the cursor quickly around.

We have already met the `D`{normal} and `C`{normal} operators which act exacly the same way
as `d$`{normal} and `c$`{normal}, so which one should you use? They are both equally repeat-
able because both are only once action, but the former require fewer
keystrokes.

# Lesson 1.11: CHARACTER- AND LINEWISE MOTION

**The `l`{normal} motion operates on a single character and `_`{normal} on the line **

  1. Position your cursor on the p in "mption".

  2. Press `cl`{normal} to enter insert mode, make the correction and exit back.

---> Every mption we learn allows construction of new actions. {expect:Every motion we learn allows construction of new actions.}
---> Every motion we learn allows construction of new actions. {expect:Every motion we learn allows construction of new actions.}

Since this is a very common motion you can also use the space bar, it
has the same effect. Pick whichever you prefer.

Now let's try the line-wise motion.

  1. Position your cursor anywhere on the line below.

  2. Press `d_`{normal} to delete the entire line.

---> This line has to go. {expect:ANYTHING}

Line-wise actions are very common and so there is a special convention:
use the operator as motion as well to affect the entire line.

  1. Press `cc`{normal} To change the contents of the entire line.

---> Change this line. {expect:This is the way it should be.}
---> This is the way it should be. {expect:This is the way it should be.}

This is generally preferrable to the underscore motion above. Ultimately
it makes no difference, but most instructions you will come across use
the doubled form.

# Lesson 1.12: FIND MOTION

**The `f`{normal} and `t`{normal} motions can jump to a particular character **

We have already learned about word-wise motions, but what if we want to
make even bigger jumps? We can specify a character to jump to. We can
repeat the jump with `;`{normal} or with `,`{normal} in the other direction.

  1. Move the cursor to the beginning of the line.

  2. Press `fu`{normal} to jump to the first occurence of the 'u' character.

  3. Oops, we haven't reached our target yet. Press `;`{normal} to repeat the
     search.

  4. Now change the word.

---> The brown fox jumps under the lazy dog. {expect:The brown fox jumps over the lazy dog.}
---> The brown fox jumps over the lazy dog. {expect:The brown fox jumps over the lazy dog.}

If we don't want to include the character we have searched for we can
use the `t`{normal} motion. It stands for "'til" as in "until".

  1. Place the cursor at the first character of the sequence to change.

  2. Press `ct`{normal} to change 'til the period.

---> This sentence was good until I lost it. {expect:This sentence is just right.}
---> This sentence is just right. {expect:This sentence is just right.}

We can also perform these motion in the other direction using their
upper-case variants. This time the upper-case does not supercharge the
motion, it does its opposite. That's also a common convention. Try it
out:

  1. Place the cursor at the end of the sentence.

  2. Press `cFu`{normal} to jump backwards and change the sentence.

---> The brown fox jumps under the bus. {expect:The brown fox jumps over the lazy dog.}
---> The brown fox jumps over the lazy dog. {expect:The brown fox jumps over the lazy dog.}

It is not always a good idea to search for the character we want. If
it's a very common character we will waste keystrokes skipping over the
false positives. Often times it's better to jump to a nearby but less
common character and then correct the position by one or two.

# Lesson 1.13: UNDO, REDO AND REPEAT

**We can undo and redo changes. More imporantly though, we can repeat them **

To undo a change press `u`{normal}, press `<C-R>`{normal} to redo it again.

  1. Make some change to the line to break it.

  2. Undo your change by pressing `u`{normal}.

  3. You can re-apply the change pressing `<C-r>`{normal}.

---> Everything is great. {expect:Everything is great.}

In the lessons above we have been metioning repeatability of actions and
here is where it comes into play. We can repeat any last action using
the period `.`{normal} operator.

  1. Navigate to the first wrong word and change it with `ce`{normal}.

  2. After the change exit insert mode immediately and jump to the next
     word.

  3. Now press `.`{normal} and see the change take effect immediately.

---> Roses are blue, and tomatoes are blue as well. {expect:Roses are red, and tomatoes are red as well.}
---> Roses are red, and tomatoes are red as well. {expect:Roses are red, and tomatoes are red as well.}

An action consits of a count, an operator and a motion, you know that
already. What we did not tell you is that everything you type in insert
mode is part of the action as well. This means you can repeat entire
phrases, sentences or even paragraphs. The only catch is that you cannot
leave insert mode or it ends the action.

The dot is still very powerful because it assigns itself automatically
and you should use it whenever the possibility arises. Like most other
operators it can be combined with a motion.

## Lesson 1.14: THE PUT COMMAND

**Type `p`{normal} to put previously deleted text after the cursor. **

The `p`{normal} operator can [put](put) (paste) previously deleted text after the cursor,
and the upper-case variant places it in front of the cursor.

  1. Type `dd`{normal} on the d) line to delete it.

  2. Move the cursor to the c) line, above where the deleted line should
     go.

  3. Type `p`{normal} to put the line below the cursor.

  4. Now delete the a) line below and move the cursor to the b) line.

  5. Type `P`{normal} to put the line above the cursor.

---> d) Can you learn too? {expect:ANYTHING}
---> b) Violets are blue, {expect:ANYTHING}
---> c) Intelligence is learned, {expect:ANYTHING}
---> a) Roses are red, {expect:ANYTHING}

The deleted text is stored in a so-called register, memory holding some
text temporarliy, and always contains the last deletion or yank (see
next lesson). You will later learn about custom registers you can assign
yourself. This operator allows you to transplant blocks of text at any
size.

# Lesson 1.15: COPY AND PASTE TEXT

**Use the `y`{normal}  operator to copy text**

The operator `y`{normal} stands for "yank", it's essentially the same as "copy" in
other editors. After yanking the text we can put it somewhere else.

  1. Place the cursor somewhere on the line marked "a)".

  2. Type `yy`{normal}  to [yank](yank) (copy) the endtire line.

  4. Now press `p`{normal} to put end line below the cursor.

  5. You can go ahead and fix the two wrong word.

---> a) this is the first item.


---> a) this is the first item.
---> b) this is the second item. {expect:b) this is the second item.}

Like other operators `y`{normal} can be be used with a count to yank for example
several words in one go: `2yw`{normal} would yank two words and `2yy`{normal} would yank two
lines.

# Lesson 1.16: MOTIONS INSIDE AND AROUND

**Use the `i`{normal} motion inside something and `a`{normal} around **

Often times your cursor will not be at the edge of a piece of text you
want to edit. It would be a waste of time to always have to jump to the
beginning, so we can use `i`{normal} (inside) and `a`{normal} (around) in
that case.

  1. Place the cursor somewhere in the messed up word.

  2. Type `ciw`{normal} or `caw`{normal} to change the word.

---> My aksdhfahj pet is my dog. {expect:My favourite pet is my dog.}
---> My favourite pet is my dog. {expect:My favourite pet is my dog.}

For words it doesn't matter whether you use inside or around because a
word is bordered by its own charaters. The mnemonic is easy to remember
as "change a word".

There are cases though where it does matter which one you use.

  1. Place the cursor somewhere inside the quotation marks.

  2. Type `ci"`{normal} to change the contents of the quotation marks, but not the
     marks.

---> The "white cat leaps" over the lazy dog. {expect:The "brown fox jumps" over the lazy dog.}
---> The "brown fox jumps" over the lazy dog. {expect:The "brown fox jumps" over the lazy dog.}

  3. Now type `ca"`{normal} instead: The quotation marks will be changed as well.

---> The "white cat leaps" over the lazy dog. {expect:The brown fox jumps over the lazy dog.}
---> The brown fox jumps over the lazy dog. {expect:The brown fox jumps over the lazy dog.}

You can also motion inside/around parentheses, brackets or braces.
Basically, if you think something can surround text try this motion.
Using this motion saves you the jumping back and forth and makes the
action more repeatable.

# Lesson 1.17: CURSOR LOCATION AND FILE STATUS

**Type `<Ctrl-g>`{normal} to show your location in the file and the file status.
Type  `G`{normal}  to move to a line in the file. **

NOTE: Read this entire lesson before executing any of the steps.

  1. Press `<Ctrl-g>`{normal}, a message will appear at the bottom of the page
     with the filename and the position in the file.  Remember the line
     number for Step 3.

NOTE:  You may see the cursor position in the lower right corner of the
       screen This happens when the ['ruler']('ruler') option is set (see  :help
       'ruler')

  2. Press [`G`](G)  to move you to the bottom of the file.
     Type  [`gg`](gg)  to move you to the start of the file.

  3. Type the number of the line you were on and then  `G`{normal} .  This will
     return you to the line you were on when you first pressed <Ctrl-g>.

  4. If you feel confident to do this, execute steps 1 through 3.

# Lesson 1.18: MATCHING PARENTHESES SEARCH

**Type `%`{normal} to find a matching ), ], or } . **

  1. Place the cursor on any (, [, or { in the line below marked --->.

  2. Now press the [`%`](%) key.

  3. The cursor will move to the matching parenthesis or bracket.

  4. Type `%`{normal} to move the cursor to the other matching bracket.

  5. Move the cursor to another (,),[,],{ or } and see what  %  does.

---> This ( is a test line with ('s, ['s ] and {'s } in it. )) {expect:ANYTHING}

NOTE: This is very useful in debugging a program with unmatched
      parentheses!

# Summary of Part 1

So far we have learned how to do basic text operation, we know how to
navigate text quickly, how to insert text and finally we learned how to
transplant text. We have also learned that Vim actions are actually
sentences constructed acctording to a grammar. Learning how to express
our thoughts in this Vim language is the key to getting really product-
ive, allowing you to execute actions as fast as you can think them.

=========  =================        ========  ========================
 Motion          Effect             Operator  Effect
=========  =================        ========  ========================
   `h`{normal}       left                        `x`{normal}      Delete current character
   `j`{normal}       down                        `i`{normal}      Insert before cursor
   `k`{normal}       up                          `a`{normal}      Append after cursor
   `l`{normal}       right                       `o`{normal}      Open a new line
   `w`{normal}       next word                   `d`{normal}      Delete text with motion
   `e`{normal}       end of word                 `y`{normal}      Yank text with motion
   `b`{normal}       beginning of word           `c`{normal}      Change text with motion
   `0`{normal}       beginning of line           `r`{normal}      Replace character/text
   `$`{normal}       end of line                 `u`{normal}      Undo action
   `l`{normal}       current character         <C-R>    Redo action
 `<SPACE>`{normal}   current character           `p`{normal}      Put yanked/deleted text
   `_`{normal}       current line             ========  ========================
   `f`{normal}       fing character
   `t`{normal}       'till character         Pressing an operator twice acts as
   `i`{normal}       inside something        a motion on the entire line.
   `a`{normal}       around something
   `g`{normal}       first line
   `G`{normal}       last line
   `%`{normal}       matching braces
=========  =================


# Part 2: EX COMMANDS

**Command mode is where we can execute editor commands**

You have already met command-mode before when you quit Vim. First you
press `:`{normal}, then you enter your command and possibly some arguments and hit
`<CR>`{normal} to execute it. Executing a command puts us back into normal mode.

The name "ex command" has no particular meaning, it is a historical
leftover from a previous Unix text editor called "ex". Ex was a prede-
cessor to vi, which is a predecessor to Vim, and was operated exclusiv-
ely using such commands.

While in command mode you can auto-complete the same way as in the shell
by hitting the `<TAB>`{normal} key. While typing a command you can press <C-D> to
list possible suggestions.

# Lesson 2.1: WRITING AND CLOSING A FILE

**Use the `:write`{vim} command to write the current file and `:quit`{vim} to close it.**

You have already met `:quit`{vim} when you quit Vim. If you have a file open
you can use `:write`{vim} to save it to disc, assuming the file is not write-
protected.

To close a file use the `:quit`{vim} command. If the file has been edited Vim
will not allow you to close it, this is to protect you from losing you
changes by accidently closing. You can force a quit by supercharging the
command with an exclamation mark: `quit!`{vim}. This is a common convention,
similar to the upper case for operators.

Now is a good time to try it out. Close this file and then re-open it
the same way you did last time.

Typing out `:write`{vim} and `:quit`{vim} every time is cumbersome, so pretty much
every ex command can be shortened. The shortest unambiguous part does
the job, so you could also write `:wri`{vim} and get the same results. On top
of that many commands also have special abbreviations. You will often
see these two commands written as `:w`{vim} and `:q`{vim}.

To write and close a file in one go use `:wq`{vim}.

You can close all open files with `:qall`{vim} or `:qa`{vim} and write all files with
`:wall`{vim} or `:wa`{vim}. And you might have guessed it already, use `:wqall`{vim} or `:wqa`{vim}
to write and quit all files.

A file is saved under the same name it already has, to save it as a new
file enter a file name as an argument: `:w newfile.txt`{vim}

# Lesson 2.2: NEW AND EXISTING FILES

**Use `:new`{vim} and `:edit`{vim} to open new or existing files **

  1. Type `:new`{vim} to open a new window. Try it out right now, you will see
     a new window pop up.

  2. Now type in some text and save the file under some name
     (`:w newfile.txt`{vim}). Quit the file.

  3. Open a new window again.

  4. Type `:edit newfile.txt`{vim} to open the file again. You can also abbre-
     viate it to `:e`{vim}.

If you want to open a file in a vertical window rather than a horizontal
prepend a 'v' to the command: `:vnew`{vim}.

# Lesson 2.3: SPLITTING A VIEW

**Use `:split`{vim} and `:vsplit`{vim} to split a window **

  1. Type `:split`{vim} and see your file split in two horizontally.

  2. Now type `:vsplit`{vim} to split a windo vertically.

  3. You can close the windows again with the `:q`{vim} command.

Split windows are still the same file, so any changes in one window ap-
ply to other windows as well.

# Lesson 2.4: THE WORKING DIRECTORY

**Use `:pwd`{vim} to print the current working directory **

  1. Type `:pwd`{vim} and the command line will show the path in the command
     line.

Vim is usually run from a terminal emulator, but even when you are using
a GUI you still have a working directory. Every path and every file name
is relative to it. To change the working directory of Vim use the `:cd`{vim}
command.

# Lesson 2.5: EXECUTING EXTERNAL COMMANDS

**Vim provides a shell to execute external commands **

You can use any command for your operating system by prepending it with
an exclamation mark.

  1. Type `:!ls`{vim} to print the contents of the current working directory.

  2. Type `:!touch file`{vim} to create a file.

  3. Type `:!rm file`{vim} to delete a file.

# Lesson 2.6: RETRIEVING AND MERGING FILES

**Use `:r`{vim} to read contents of a fil into the current file **

If you want to append the contents of a file to an open file use the `:r`{vim}
command.

  1. Place the cursor on the marked file below.

  2. Type `:r`{vim} and the current file will be pasted below.

---> Paste file below this.

If you provide a file as an argument that file will be appended. Here is
another useful thing we can do with it:

  1. Place the cursor on the marked file below.

  2. Type `:r !ls`{vim} to paste the result of a shell command.

---> Contents of the working directory:

Now you can work with the output of the shell.

# Lesson 2.7: THE SUBSTITUTION COMMAND

**The `:s/old/new/g` command can find and replace text **

  1. Move the cursor to the line below.

  2. Type
~~~ cmd
     :s/thee/the <Enter>
~~~
     NOTE that the [:s](:s) command only changed the first occurrence of
     "thee" in the line.

---> thee best time to see thee flowers is in thee spring. {expect:the best time to see the flowers is in the spring.}

  3. Undo your change and type
~~~ cmd
     :s/thee/the/g
~~~
     Adding the g [flag](:s_flags) means to substitute globally in the line, change
     all occurrences of "thee" in the line.

The substitution command is followed by a pattern to search for, then
the replacement and finally a series of option flags. There are other
flages as well, but 'g' is the most important one. The pattern is a
regular expression, but in this example we cared only about a specific
word so we used the literal string we wanted.

Here are a few more examples of what is possible with the substitute
command:

  4. To change every occurrence of a character string between two lines
     type
~~~ cmd
     :#,#s/old/new/g
~~~
     where #,# are the line numbers of the range of lines where the
     substitution is to be done.

     Type
~~~ cmd
     :%s/old/new/g
~~~
     to change every occurrence in the whole file.

     Type
~~~ cmd
     :%s/old/new/gc
~~~
     to find every occurrence in the whole file, with a prompt whether
     to substitute or not.

# Lesson 2.8: THE SET OPTION COMMAND

**Setting Vim options is done using a command **

  1. Type `:set list` to make Vim display whitespace characters.

  2. Type `:set nolist` to make Vim hide whitespace characters.

  3. Type `:set list!` to toggle the option on and off.

  4. Type `:set invlist` to toggle the option as well.

  5. Type `:set list?` to print the current state of the option.

Most options in Vim are boolean values. The syntax for set set command
is
~~~ cmd
    :set [no|inv]option[!]
~~~
where 'option' is the name of the option. The option name without prefix
always turns it on and with the 'no' prefix always turns it off. The
exclamation mark postfix or the 'inv' prefix always toggle between on
and off.

Some actions take values instead:

  5. Type
~~~ cmd
    :set foldcolumn=4
~~~
     to make Vim display a column to the left

You can also reset any option to its default:

  6. Type
~~~ cmd
    :set foldcolumn&
~~~
     to reset.

There are more ways to manipulate options, see the help manual for all
of them. Check the manual for every individual option as well, usually
there is an abbreviated form of them as well.

# Lesson 2.9: SEARCH MODE

**Type `/`{normal} followed by a pattern to search for the pattern. **

This is not really a command but it fits here. Press the `/`{normal} key and type
the word "fox". The cursor will jump to the word on the line below.

---> The brown fox jumps over the lazy dog.

We can repeat this search using the `n`{normal} (next) operator. You will cycle
through all the matches, so keep pressing it until you are back here. To
search in the other direction use `N`{normal}.

We can also issue a search in the opposite direction using the `?`{normal} key.
Search again for the word "fox". Try it out.

As you have seen the `n`{normal} and `N`{normal} keys are now reversed as well. It's easier
to issue one backwards search and then keep hitting `n`{normal} than hitting `N`{normal} re-
peatedly.

The pattern does not have to be just a word, it can be any regular ex-
pression. Try searching for "f.x". You will find matches for both "fox"
and "fix".

# Summary of Part 2

TODO


# PART 3: VISUAL MODE

Visual mode is similar to selecting text in other text editors. We de-
fine a visual selection over a piece of text and execute an action or
command over that selection.

# Lesson 3.1: VISUAL MODE

**Press `v`{normal} to select a sequence of text **

  1. Move the cursor on first character of the first word to change.

  2. Press `v`{normal} to enter visual mode.

  3. Use the motions you know to move the selection to the last charac-
     ter of the last word to change.

  4. Press `c`{normal} to change the selected portion of text.

---> Vim is a horribly complicated to use text editor. {expect:Vim is a very efficient and productive text editor.}
---> Vim is a very efficient and productive text editor. {expect:Vim is a very efficient and productive text editor.}

We want to change as much text as possible, and counting words is slow.
Visual mode allows us to make an exact selection before applying our
action.

You can use counts on the motions when defining your selection, but when
performing the operation we cannot. There is no reason anyway, the se-
lection takes the place of count and motion.

Visual mode is very nice, but don't overuse it. Take the following ex-
ample:

---> Vim's usability is an utter and complete mess conceived by madmen. {expect:Vim's usability allows users to edit text as fast as they think.}
---> Vim's usability allows users to edit text as fast as they think. {expect:Vim's usability allows users to edit text as fast as they think.}

It is faster to position the cursor on the first wrong word and then
change 'til the period using `ct.`{normal}.

# Lesson 3.2: VISUAL LINE MODE

**Select entire lines with `V`{normal} **

There are two pairs of lines wrong. We don't want to fix them one at a
time, so we'll transplant two lines at a time.

  1. Move the cursor on the first line.

  2. Press `V`{normal} to select the entire line. Move to cursor down with `j`{normal}.

  3. Press `d`{normal} to delete the selection, move to cursor on the second line.

  4. Press `p`{normal} to put the two lines below the cursor.

---> c) Intelligence is learned, {expect:ANYTHING}
---> d) Can you learn too? {expect:ANYTHING}
---> a) Roses are red, {expect:ANYTHING}
---> b) Violets are blue, {expect:ANYTHING}

We could have used `2dd`{normal} here as well, but in practice we will often have
to transplant many more lines.

# Lesson 3.3: VISUAL BLOCK MODE

**We can also select a rectangular slice of text. **

  1. We want to change the prefix all these items. Move the cursor to the
     first '\'.

  2. Press <C-V> to enter visual mode.

  3. Move the cursor down and right to cover all prefixes.

  3. Press `e`{normal} to select the rest of the word.

  4. Press `c`{normal} to change the prefix to "-". When you exit insert mode the
     change will be applied to the entire selection.

---> \item Apple {expect:- Apple}
---> \item Banana {expect:- Banana}
---> \item Orange {expect:- Orange}
---> \item Pear {expect:- Pear}
---> \item Lemon {expect:- Lemon}

# Lesson 3.4: EXECUTING COMMANDS ON VISUAL SELECTIONS

**We can execute a command over only the selected part **

  1. Select the sentence visually

  2. Press `:`{normal} to enter command mode. The command will already be be pre-
     fixed with a range: ':'<,'>'

  3. Complete the command to read ':'<,'>w selection.txt' and press
     enter to save only the selected slice to a file.

---> Select this sentence.

The strings "'<" and "'>" act as delimiters for a range: the range of
the visual selection. Most commands can operate on a range.

# Lesson 3.5: MODIFYING A SELECTION

**Change the visually selected region using `o`{normal} **

We know that we can use any motion to change the contents of our se-
lection, but they work only on one end of the selection. We can toggle
to the other end by pressing `o`{normal} when in visual mode.

  1. Make a visual selection of any kind on the lines below and try
     modifying it.

  2. Press `o`{normal} and try modifying it again.

---> a) Roses are red, {expect:ANYTHING}
---> b) Violets are blue, {expect:ANYTHING}
---> c) Intelligence is learned, {expect:ANYTHING}
---> d) Can you learn too? {expect:ANYTHING}

# Summary of Part 3

Visual mode is a tool that lets us fine-tune a selection of text before
perforing an action on it.  Use `v`{normal} to select text character-wise, `V`{normal} to
select linewise, and `<C-V`{normal} to select blockwise, that is, in rectangular
blocks.  Operators operate on the selected portions and most commands
use the selection as a range to work on.


# Part 4: PERMANENT SETTINGS AND GETTING HELP

**Enable Vim features**

Vim has many more features than Vi, but most of them are disabled by
default. To start using more features you have to create a "vimrc" file.

  1. Start editing the "vimrc" file.  This depends on your system:
    `:e ~/.vimrc`{vim}     "for Unix-like systems
    `:e $VIM/_vimrc`{vim}   "for Microsoft Windows

  2. Now read the example "vimrc" file contents:
    `:r $VIMRUNTIME/vimrc_example.vim`{vim}

  3. Write the file with:
    `:w`{vim}

The next time you start Vim it will use syntax highlighting. You can add
all your preferred settings to this "vimrc" file.  For more information
type `:help vimrc-intro`{vim}

**Use the on-line help system**

You now know the basics of using Vim, enough for everyday text editing.
We have only scratched the surface of what is possible even on the
topics we covered in this tutorial. If you want to learn more about
individual topics the user manual is the next place to go to.

Vim has a comprehensive on-line help system.  To get started, try one of
these three:
    - type `:help`{vim} `<Enter>`{normal}
    - press the `<HELP>`{normal} key (if you have one)
    - press the `<F1>`{normal} key (if you have one)


# CONCLUSION

This was intended to give a brief overview of the Vim editor, just
enough to allow you to use the editor fairly easily. It is far from
complete as Vim has many many more commands.  Consult the help often.

There are many resources online to learn more about vim. Here's a list
of a bunch of them:

- *Learn Vim Progressively*: http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/
- *Learning Vim in 2014*: http://benmccormick.org/learning-vim-in-2014/
- Vimcasts: http://vimcasts.org/
- Vim Video-Tutorials by Derek Wyatt: http://derekwyatt.org/vim/tutorials/
- *Learn Vimscript the Hard Way*: http://learnvimscriptthehardway.stevelosh.com/
- *7 Habits of Effective Text Editing*: http://www.moolenaar.net/habits.html

If you prefer a book, *Practical Vim* by Drew Neil is recommended often.

This tutorial was written by Michael C. Pierce and Robert K. Ware,
Colorado School of Mines using ideas supplied by Charles Smith, Colorado
State University.  E-mail: bware@mines.colorado.edu.

Modified for Vim by Bram Moolenaar.
Modified fov vim-tutor-mode by Felipe Morales.
